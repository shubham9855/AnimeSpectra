{"ast":null,"code":"var _jsxFileName = \"D:\\\\New folder (2)\\\\Projects\\\\AnimeSpectra\\\\myapp\\\\src\\\\Components\\\\Comment\\\\Comments.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\nimport \"./Comment.css\";\nimport { getComments as getCommentsApi, createComment as createCommentApi, updateComment as updateCommentApi, deleteComment as deleteCommentApi } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = ({\n  postID,\n  commentData,\n  currentUserId\n}) => {\n  _s();\n  const token = localStorage.getItem(\"token\");\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  // const [error, setError] = useState(null);\n  const [cmt, setCmt] = useState(0);\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n\n  //extracted root comments to display\n  const rootComments = backendComments.filter(backendComment => backendComment.parentId === null);\n\n  //extracted all the replies for a particular comment wrt to comment id\n  const getReplies = commentId => backendComments.filter(backendComment => backendComment.parentId === commentId);\n  const addComment = async (text, parentId) => {\n    let opComment = {};\n    if (parentId === null) {\n      opComment = {\n        postId: postID,\n        description: text\n        // parentId: parentId,\n      };\n    } else {\n      opComment = {\n        postId: postID,\n        description: text,\n        parentId: parentId\n      };\n    }\n    try {\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/comments`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(opComment)\n      });\n      if (!response.ok) {\n        throw new Error(\"like failed\");\n      }\n      window.location.reload();\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  useEffect(() => {\n    setBackendComments(commentData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n      handleSubmit: addComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: rootComments.map(rootComment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: rootComment,\n        replies: getReplies(rootComment.commentId),\n        activeComment: activeComment,\n        setActiveComment: setActiveComment,\n        addComment: addComment,\n        currentUserId: currentUserId\n      }, rootComment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(Comments, \"m8p/Sr5MKoSw11AqvLwxyIagtSM=\");\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","CommentForm","Comment","getComments","getCommentsApi","createComment","createCommentApi","updateComment","updateCommentApi","deleteComment","deleteCommentApi","jsxDEV","_jsxDEV","Comments","postID","commentData","currentUserId","_s","token","localStorage","getItem","error","setError","loading","setLoading","cmt","setCmt","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","getReplies","commentId","addComment","text","opComment","postId","description","response","fetch","process","env","REACT_APP_BACKEND_URL","method","headers","Authorization","body","JSON","stringify","ok","Error","window","location","reload","message","className","children","handleSubmit","fileName","_jsxFileName","lineNumber","columnNumber","map","rootComment","comment","replies","id","_c","$RefreshReg$"],"sources":["D:/New folder (2)/Projects/AnimeSpectra/myapp/src/Components/Comment/Comments.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport Comment from \"./Comment\";\r\nimport \"./Comment.css\";\r\nimport {\r\n  getComments as getCommentsApi,\r\n  createComment as createCommentApi,\r\n  updateComment as updateCommentApi,\r\n  deleteComment as deleteCommentApi,\r\n} from \"../api\";\r\n\r\nconst Comments = ({ postID, commentData, currentUserId }) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  // const [error, setError] = useState(null);\r\n  const [cmt, setCmt] = useState(0);\r\n  const [backendComments, setBackendComments] = useState([]);\r\n  const [activeComment, setActiveComment] = useState(null);\r\n\r\n  //extracted root comments to display\r\n  const rootComments = backendComments.filter(\r\n    (backendComment) => backendComment.parentId === null\r\n  );\r\n\r\n  //extracted all the replies for a particular comment wrt to comment id\r\n  const getReplies = (commentId) =>\r\n    backendComments.filter(\r\n      (backendComment) => backendComment.parentId === commentId\r\n    );\r\n\r\n  const addComment = async (text, parentId) => {\r\n    let opComment = {};\r\n    if (parentId === null) {\r\n      opComment = {\r\n        postId: postID,\r\n        description: text,\r\n        // parentId: parentId,\r\n      };\r\n    } else {\r\n      opComment = {\r\n        postId: postID,\r\n        description: text,\r\n        parentId: parentId,\r\n      };\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/comments`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(opComment),\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"like failed\");\r\n      }\r\n      window.location.reload();\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setBackendComments(commentData);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"comments\">\r\n      <CommentForm handleSubmit={addComment} />\r\n      <div className=\"comments-container\">\r\n        {rootComments.map((rootComment) => (\r\n          <Comment\r\n            key={rootComment.id}\r\n            comment={rootComment}\r\n            replies={getReplies(rootComment.commentId)}\r\n            activeComment={activeComment}\r\n            setActiveComment={setActiveComment}\r\n            addComment={addComment}\r\n            currentUserId={currentUserId}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}