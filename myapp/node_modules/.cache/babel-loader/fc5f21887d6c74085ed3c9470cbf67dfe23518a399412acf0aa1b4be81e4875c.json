{"ast":null,"code":"const initialState = {\n  post: []\n};\nexport const postreducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"LIKE_POST\":\n      // let partPost = {};\n      // state.post.forEach((obj) => {\n      //   if (obj.postId === action.payload.postId) partPost = { ...obj };\n      // });\n\n      // partPost = {\n      //   ...partPost,\n      //   likes: [\n      //     ...partPost.likes,\n      //     { likeType: \"like\", userId: action.payload.userId },\n      //   ],\n      // };\n      // const finPost = state.post.filter((item) => {\n      //   return item.postId !== partPost.postId;\n      // });\n      return {\n        ...state,\n        post: state.post.map(post => post.postId === action.payload.postId ? {\n          ...post,\n          likes: [...post.likes, {\n            likeType: \"like\",\n            userId: action.payload.userId\n          }]\n        } : post)\n      };\n    case \"DISLIKE_POST\":\n      // let particularPost = {};\n      // state.post.forEach((obj) => {\n      //   if (obj.postId === action.payload.postId) particularPost = { ...obj };\n      // });\n\n      // particularPost = {\n      //   ...particularPost,\n      //   likes: particularPost.likes.filter((item) => {\n      //     return item?.userId !== action.payload.userId;\n      //   }),\n      // };\n\n      // const finalPost = state.post.filter((item) => {\n      //   return item.postId !== particularPost.postId;\n      // });\n      return {\n        ...state,\n        post: state.post.map(post => post.postId === action.payload.postId ? {\n          ...post,\n          likes: post.likes.filter(item => {\n            return (item === null || item === void 0 ? void 0 : item.userId) !== action.payload.userId;\n          })\n        } : post)\n      };\n    case \"SET_POSTS\":\n      return {\n        ...state,\n        post: action.payload\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["initialState","post","postreducer","state","action","type","map","postId","payload","likes","likeType","userId","filter","item"],"sources":["D:/New folder (2)/Projects/AnimeSpectra/myapp/src/redux/reducers/postreducer.js"],"sourcesContent":["const initialState = {\r\n  post: [],\r\n};\r\n\r\nexport const postreducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"LIKE_POST\":\r\n      // let partPost = {};\r\n      // state.post.forEach((obj) => {\r\n      //   if (obj.postId === action.payload.postId) partPost = { ...obj };\r\n      // });\r\n\r\n      // partPost = {\r\n      //   ...partPost,\r\n      //   likes: [\r\n      //     ...partPost.likes,\r\n      //     { likeType: \"like\", userId: action.payload.userId },\r\n      //   ],\r\n      // };\r\n      // const finPost = state.post.filter((item) => {\r\n      //   return item.postId !== partPost.postId;\r\n      // });\r\n      return {\r\n        ...state,\r\n        post: state.post.map((post) =>\r\n          post.postId === action.payload.postId\r\n            ? {\r\n                ...post,\r\n                likes: [\r\n                  ...post.likes,\r\n                  { likeType: \"like\", userId: action.payload.userId },\r\n                ],\r\n              }\r\n            : post\r\n        ),\r\n      };\r\n\r\n    case \"DISLIKE_POST\":\r\n      // let particularPost = {};\r\n      // state.post.forEach((obj) => {\r\n      //   if (obj.postId === action.payload.postId) particularPost = { ...obj };\r\n      // });\r\n\r\n      // particularPost = {\r\n      //   ...particularPost,\r\n      //   likes: particularPost.likes.filter((item) => {\r\n      //     return item?.userId !== action.payload.userId;\r\n      //   }),\r\n      // };\r\n\r\n      // const finalPost = state.post.filter((item) => {\r\n      //   return item.postId !== particularPost.postId;\r\n      // });\r\n      return {\r\n        ...state,\r\n        post: state.post.map((post) =>\r\n          post.postId === action.payload.postId\r\n            ? {\r\n                ...post,\r\n                likes: post.likes.filter((item) => {\r\n                  return item?.userId !== action.payload.userId;\r\n                }),\r\n              }\r\n            : post\r\n        ),\r\n      };\r\n\r\n    case \"SET_POSTS\":\r\n      return {\r\n        ...state,\r\n        post: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACnBC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGH,YAAY,EAAEI,MAAM,KAAK;EAC3D,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,WAAW;MACd;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,OAAO;QACL,GAAGF,KAAK;QACRF,IAAI,EAAEE,KAAK,CAACF,IAAI,CAACK,GAAG,CAAEL,IAAI,IACxBA,IAAI,CAACM,MAAM,KAAKH,MAAM,CAACI,OAAO,CAACD,MAAM,GACjC;UACE,GAAGN,IAAI;UACPQ,KAAK,EAAE,CACL,GAAGR,IAAI,CAACQ,KAAK,EACb;YAAEC,QAAQ,EAAE,MAAM;YAAEC,MAAM,EAAEP,MAAM,CAACI,OAAO,CAACG;UAAO,CAAC;QAEvD,CAAC,GACDV,IACN;MACF,CAAC;IAEH,KAAK,cAAc;MACjB;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA,OAAO;QACL,GAAGE,KAAK;QACRF,IAAI,EAAEE,KAAK,CAACF,IAAI,CAACK,GAAG,CAAEL,IAAI,IACxBA,IAAI,CAACM,MAAM,KAAKH,MAAM,CAACI,OAAO,CAACD,MAAM,GACjC;UACE,GAAGN,IAAI;UACPQ,KAAK,EAAER,IAAI,CAACQ,KAAK,CAACG,MAAM,CAAEC,IAAI,IAAK;YACjC,OAAO,CAAAA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEF,MAAM,MAAKP,MAAM,CAACI,OAAO,CAACG,MAAM;UAC/C,CAAC;QACH,CAAC,GACDV,IACN;MACF,CAAC;IAEH,KAAK,WAAW;MACd,OAAO;QACL,GAAGE,KAAK;QACRF,IAAI,EAAEG,MAAM,CAACI;MACf,CAAC;IACH;MACE,OAAOL,KAAK;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}