{"ast":null,"code":"const useNode = () => {\n  const insertNode = function (tree, commentId, item) {\n    if (tree.id === commentId) {\n      tree.items.push({\n        id: new Date().getTime(),\n        name: item,\n        items: []\n      });\n      return tree;\n    }\n    let latestNode = [];\n    latestNode = tree.items.map(ob => {\n      return insertNode(ob, commentId, item);\n    });\n    return {\n      ...tree,\n      items: latestNode\n    };\n  };\n  const editNode = (tree, commentId, value) => {\n    if (tree.id === commentId) {\n      tree.name = value;\n      return tree;\n    }\n    tree.items.map(ob => {\n      return editNode(ob, commentId, value);\n    });\n    return {\n      ...tree\n    };\n  };\n  const deleteNode = (tree, id) => {\n    for (let i = 0; i < tree.items.length; i++) {\n      const currentItem = tree.items[i];\n      if (currentItem.id === id) {\n        tree.items.splice(i, 1);\n        return tree;\n      } else {\n        deleteNode(currentItem, id);\n      }\n    }\n    return tree;\n  };\n  return {\n    insertNode,\n    editNode,\n    deleteNode\n  };\n};\nexport default useNode;","map":{"version":3,"names":["useNode","insertNode","tree","commentId","item","id","items","push","Date","getTime","name","latestNode","map","ob","editNode","value","deleteNode","i","length","currentItem","splice"],"sources":["D:/New folder (2)/Projects/AnimeSpectra/myapp/src/Components/hooks/useNode.js"],"sourcesContent":["const useNode = () => {\r\n  const insertNode = function (tree, commentId, item) {\r\n    if (tree.id === commentId) {\r\n      tree.items.push({\r\n        id: new Date().getTime(),\r\n        name: item,\r\n        items: [],\r\n      });\r\n\r\n      return tree;\r\n    }\r\n\r\n    let latestNode = [];\r\n    latestNode = tree.items.map((ob) => {\r\n      return insertNode(ob, commentId, item);\r\n    });\r\n\r\n    return { ...tree, items: latestNode };\r\n  };\r\n\r\n  const editNode = (tree, commentId, value) => {\r\n    if (tree.id === commentId) {\r\n      tree.name = value;\r\n      return tree;\r\n    }\r\n\r\n    tree.items.map((ob) => {\r\n      return editNode(ob, commentId, value);\r\n    });\r\n\r\n    return { ...tree };\r\n  };\r\n\r\n  const deleteNode = (tree, id) => {\r\n    for (let i = 0; i < tree.items.length; i++) {\r\n      const currentItem = tree.items[i];\r\n      if (currentItem.id === id) {\r\n        tree.items.splice(i, 1);\r\n        return tree;\r\n      } else {\r\n        deleteNode(currentItem, id);\r\n      }\r\n    }\r\n    return tree;\r\n  };\r\n\r\n  return { insertNode, editNode, deleteNode };\r\n};\r\n\r\nexport default useNode;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGA,CAAA,KAAM;EACpB,MAAMC,UAAU,GAAG,SAAAA,CAAUC,IAAI,EAAEC,SAAS,EAAEC,IAAI,EAAE;IAClD,IAAIF,IAAI,CAACG,EAAE,KAAKF,SAAS,EAAE;MACzBD,IAAI,CAACI,KAAK,CAACC,IAAI,CAAC;QACdF,EAAE,EAAE,IAAIG,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QACxBC,IAAI,EAAEN,IAAI;QACVE,KAAK,EAAE;MACT,CAAC,CAAC;MAEF,OAAOJ,IAAI;IACb;IAEA,IAAIS,UAAU,GAAG,EAAE;IACnBA,UAAU,GAAGT,IAAI,CAACI,KAAK,CAACM,GAAG,CAAEC,EAAE,IAAK;MAClC,OAAOZ,UAAU,CAACY,EAAE,EAAEV,SAAS,EAAEC,IAAI,CAAC;IACxC,CAAC,CAAC;IAEF,OAAO;MAAE,GAAGF,IAAI;MAAEI,KAAK,EAAEK;IAAW,CAAC;EACvC,CAAC;EAED,MAAMG,QAAQ,GAAGA,CAACZ,IAAI,EAAEC,SAAS,EAAEY,KAAK,KAAK;IAC3C,IAAIb,IAAI,CAACG,EAAE,KAAKF,SAAS,EAAE;MACzBD,IAAI,CAACQ,IAAI,GAAGK,KAAK;MACjB,OAAOb,IAAI;IACb;IAEAA,IAAI,CAACI,KAAK,CAACM,GAAG,CAAEC,EAAE,IAAK;MACrB,OAAOC,QAAQ,CAACD,EAAE,EAAEV,SAAS,EAAEY,KAAK,CAAC;IACvC,CAAC,CAAC;IAEF,OAAO;MAAE,GAAGb;IAAK,CAAC;EACpB,CAAC;EAED,MAAMc,UAAU,GAAGA,CAACd,IAAI,EAAEG,EAAE,KAAK;IAC/B,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,IAAI,CAACI,KAAK,CAACY,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1C,MAAME,WAAW,GAAGjB,IAAI,CAACI,KAAK,CAACW,CAAC,CAAC;MACjC,IAAIE,WAAW,CAACd,EAAE,KAAKA,EAAE,EAAE;QACzBH,IAAI,CAACI,KAAK,CAACc,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;QACvB,OAAOf,IAAI;MACb,CAAC,MAAM;QACLc,UAAU,CAACG,WAAW,EAAEd,EAAE,CAAC;MAC7B;IACF;IACA,OAAOH,IAAI;EACb,CAAC;EAED,OAAO;IAAED,UAAU;IAAEa,QAAQ;IAAEE;EAAW,CAAC;AAC7C,CAAC;AAED,eAAehB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}